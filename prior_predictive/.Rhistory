labels=seq(0,1,by=0.1)) +
scale_L_continuous(limits=c(0.0,1.0),
breaks=seq(0,1,by=0.1),
labels=seq(0,1,by=0.1)) +
scale_R_continuous(limits=c(0.0,1.0),
breaks=seq(0,1,by=0.1),
labels=seq(0,1,by=0.1)) +
theme(plot.title = element_text(size=20),
axis.text=element_text(size=20)) +
labs(
#title = bquote((alpha~","~beta~","~gamma) == (.(round(alpha,2))~","~.(round(beta,2))~","~.(round(gamma,2)))),
T = "",
L = "",
R = ""
)
ggtern(data = sdir_samples, aes(x = A, y = B, z = C)) +
geom_hex_tern(binwidth=0.015, show.legend = FALSE) +
#geom_point(size=0.25, show.legend = FALSE) +
scale_fill_viridis_c() +
geom_Tisoprop(value=c(.5),colour='grey50', size = 2, linetype = "dashed") +
geom_Lisoprop(value=c(.5),colour='grey50', size = 2, linetype = "dashed") +
geom_Risoprop(value=c(.5),colour='grey50', size = 2, linetype = "dashed") +
scale_T_continuous(limits=c(0.0,1.0),
breaks=seq(0,1,by=0.1),
labels=seq(0,1,by=0.1)) +
scale_L_continuous(limits=c(0.0,1.0),
breaks=seq(0,1,by=0.1),
labels=seq(0,1,by=0.1)) +
scale_R_continuous(limits=c(0.0,1.0),
breaks=seq(0,1,by=0.1),
labels=seq(0,1,by=0.1)) +
theme(plot.title = element_text(size=20),
axis.text=element_text(size=20)) +
labs(
#title = bquote((alpha~","~beta~","~gamma) == (.(round(alpha,2))~","~.(round(beta,2))~","~.(round(gamma,2)))),
T = "",
L = "",
R = ""
)
sdir_samples <- sDir_mh(sample_num, alphas =  c(3, 5, 3), gamma = 0.1, starting_value, tuning_sd)
# Ternary Plot
colnames(sdir_samples) <- LETTERS[1:3]
ggtern(data = sdir_samples, aes(x = A, y = B, z = C)) +
geom_hex_tern(binwidth=0.015, show.legend = FALSE) +
#geom_point(size=0.25, show.legend = FALSE) +
scale_fill_viridis_c() +
geom_Tisoprop(value=c(.5),colour='grey50', size = 2, linetype = "dashed") +
geom_Lisoprop(value=c(.5),colour='grey50', size = 2, linetype = "dashed") +
geom_Risoprop(value=c(.5),colour='grey50', size = 2, linetype = "dashed") +
scale_T_continuous(limits=c(0.0,1.0),
breaks=seq(0,1,by=0.1),
labels=seq(0,1,by=0.1)) +
scale_L_continuous(limits=c(0.0,1.0),
breaks=seq(0,1,by=0.1),
labels=seq(0,1,by=0.1)) +
scale_R_continuous(limits=c(0.0,1.0),
breaks=seq(0,1,by=0.1),
labels=seq(0,1,by=0.1)) +
theme(plot.title = element_text(size=20),
axis.text=element_text(size=20)) +
labs(
#title = bquote((alpha~","~beta~","~gamma) == (.(round(alpha,2))~","~.(round(beta,2))~","~.(round(gamma,2)))),
T = "",
L = "",
R = ""
)
sdir_samples <- sDir_mh(sample_num, alphas =  c(3, 3, 3), gamma = 1, starting_value, tuning_sd)
# Ternary Plot
colnames(sdir_samples) <- LETTERS[1:3]
ggtern(data = sdir_samples, aes(x = A, y = B, z = C)) +
geom_hex_tern(binwidth=0.015, show.legend = FALSE) +
#geom_point(size=0.25, show.legend = FALSE) +
scale_fill_viridis_c() +
geom_Tisoprop(value=c(.5),colour='grey50', size = 2, linetype = "dashed") +
geom_Lisoprop(value=c(.5),colour='grey50', size = 2, linetype = "dashed") +
geom_Risoprop(value=c(.5),colour='grey50', size = 2, linetype = "dashed") +
scale_T_continuous(limits=c(0.0,1.0),
breaks=seq(0,1,by=0.1),
labels=seq(0,1,by=0.1)) +
scale_L_continuous(limits=c(0.0,1.0),
breaks=seq(0,1,by=0.1),
labels=seq(0,1,by=0.1)) +
scale_R_continuous(limits=c(0.0,1.0),
breaks=seq(0,1,by=0.1),
labels=seq(0,1,by=0.1)) +
theme(plot.title = element_text(size=20),
axis.text=element_text(size=20)) +
labs(
#title = bquote((alpha~","~beta~","~gamma) == (.(round(alpha,2))~","~.(round(beta,2))~","~.(round(gamma,2)))),
T = "",
L = "",
R = ""
)
sDir_mh_new <- function(sample_num, alphas, gamma, starting_value, tuning_sd){
M <- length(starting_value)
all_x <- matrix(NA, sample_num, M)
x_curr <-  starting_value
for(g in 1:sample_num){
x_prop <- bayesm::rdirichlet(alpha = alphas)
log_acrate <- 2 * gamma * (
apply(as.matrix(rdist(x_prop[-1])), 1, function(x) sum(log(abs( x ))[!is.infinite(log(abs( x )))]  )) - apply(as.matrix(rdist(x_curr[-1])), 1, function(x) sum(log(abs( x ))[!is.infinite(log(abs( x )))]  ))
)
# excluding the last element of w from the pwds:
# log_acrate <- 2 * gamma * (
#   apply(as.matrix(rdist(head(x_prop, -1))), 1, function(x) sum(log(abs( x ))[!is.infinite(log(abs( x )))]  )) - apply(as.matrix(rdist(head(x_curr, -1))), 1, function(x) sum(log(abs( x ))[!is.infinite(log(abs( x )))]  ))
# )
log_acrate <- min(log_acrate, 1)
if(log(runif(1)) < log_acrate){
x_curr <-  x_prop
}
all_x[g, ] <-  x_curr
}
return(all_x)
}
sdir_samples_new <- sDir_mh_new(sample_num, alphas =  c(3, 3, 3), gamma = 1, starting_value, tuning_sd)
# Ternary Plot
colnames(sdir_samples) <- LETTERS[1:3]
colnames(sdir_samples_new) <- LETTERS[1:3]
# Save plot
#png(filename, width = 500, height = 500)
# png( paste0("tern_sdir/", filename),
#      width     = 10,
#      height    = 10,
#      units     = "in",
#      res       = 1200,
#      pointsize = 4)
# tmp <-
all_terns_equal_a[[ind]] <-
ggtern(data = sdir_samples, aes(x = A, y = B, z = C)) +
geom_hex_tern(binwidth=0.015, show.legend = FALSE) +
#geom_point(size=0.25, show.legend = FALSE) +
scale_fill_viridis_c() +
geom_Tisoprop(value=c(.5),colour='grey50', size = 2, linetype = "dashed") +
geom_Lisoprop(value=c(.5),colour='grey50', size = 2, linetype = "dashed") +
geom_Risoprop(value=c(.5),colour='grey50', size = 2, linetype = "dashed") +
scale_T_continuous(limits=c(0.0,1.0),
breaks=seq(0,1,by=0.1),
labels=seq(0,1,by=0.1)) +
scale_L_continuous(limits=c(0.0,1.0),
breaks=seq(0,1,by=0.1),
labels=seq(0,1,by=0.1)) +
scale_R_continuous(limits=c(0.0,1.0),
breaks=seq(0,1,by=0.1),
labels=seq(0,1,by=0.1)) +
theme(plot.title = element_text(size=20),
axis.text=element_text(size=20)) +
labs(
#title = bquote((alpha~","~beta~","~gamma) == (.(round(alpha,2))~","~.(round(beta,2))~","~.(round(gamma,2)))),
T = "",
L = "",
R = ""
)
#dev.off()
tmp <-
ggtern(data = sdir_samples_new, aes(x = A, y = B, z = C)) +
geom_hex_tern(binwidth=0.015, show.legend = FALSE) +
#geom_point(size=0.25, show.legend = FALSE) +
scale_fill_viridis_c() +
geom_Tisoprop(value=c(.5),colour='grey50', size = 2, linetype = "dashed") +
geom_Lisoprop(value=c(.5),colour='grey50', size = 2, linetype = "dashed") +
geom_Risoprop(value=c(.5),colour='grey50', size = 2, linetype = "dashed") +
scale_T_continuous(limits=c(0.0,1.0),
breaks=seq(0,1,by=0.1),
labels=seq(0,1,by=0.1)) +
scale_L_continuous(limits=c(0.0,1.0),
breaks=seq(0,1,by=0.1),
labels=seq(0,1,by=0.1)) +
scale_R_continuous(limits=c(0.0,1.0),
breaks=seq(0,1,by=0.1),
labels=seq(0,1,by=0.1)) +
theme(plot.title = element_text(size=20),
axis.text=element_text(size=20)) +
labs(
#title = bquote((alpha~","~beta~","~gamma) == (.(round(alpha,2))~","~.(round(beta,2))~","~.(round(gamma,2)))),
T = "",
L = "",
R = ""
)
tmp| all_terns_equal_a[[ind]]
library(patchwork)
tmp| all_terns_equal_a[[ind]]
sDir_mh_new <- function(sample_num, alphas, gamma, starting_value, tuning_sd){
M <- length(starting_value)
all_x <- matrix(NA, sample_num, M)
x_curr <-  starting_value
for(g in 1:sample_num){
x_prop <- bayesm::rdirichlet(alpha = alphas)
# log_acrate <- 2 * gamma * (
#   apply(as.matrix(rdist(x_prop[-1])), 1, function(x) sum(log(abs( x ))[!is.infinite(log(abs( x )))]  )) - apply(as.matrix(rdist(x_curr[-1])), 1, function(x) sum(log(abs( x ))[!is.infinite(log(abs( x )))]  ))
# )
# excluding the last element of w from the pwds:
log_acrate <- 2 * gamma * (
apply(as.matrix(rdist(head(x_prop, -1))), 1, function(x) sum(log(abs( x ))[!is.infinite(log(abs( x )))]  )) - apply(as.matrix(rdist(head(x_curr, -1))), 1, function(x) sum(log(abs( x ))[!is.infinite(log(abs( x )))]  ))
)
log_acrate <- min(log_acrate, 1)
if(log(runif(1)) < log_acrate){
x_curr <-  x_prop
}
all_x[g, ] <-  x_curr
}
return(all_x)
}
sdir_samples_new <- sDir_mh_new(sample_num, alphas =  c(3, 3, 3), gamma = 1, starting_value, tuning_sd)
colnames(sdir_samples_new) <- LETTERS[1:3]
#dev.off()
tmp <-
ggtern(data = sdir_samples_new, aes(x = A, y = B, z = C)) +
geom_hex_tern(binwidth=0.015, show.legend = FALSE) +
#geom_point(size=0.25, show.legend = FALSE) +
scale_fill_viridis_c() +
geom_Tisoprop(value=c(.5),colour='grey50', size = 2, linetype = "dashed") +
geom_Lisoprop(value=c(.5),colour='grey50', size = 2, linetype = "dashed") +
geom_Risoprop(value=c(.5),colour='grey50', size = 2, linetype = "dashed") +
scale_T_continuous(limits=c(0.0,1.0),
breaks=seq(0,1,by=0.1),
labels=seq(0,1,by=0.1)) +
scale_L_continuous(limits=c(0.0,1.0),
breaks=seq(0,1,by=0.1),
labels=seq(0,1,by=0.1)) +
scale_R_continuous(limits=c(0.0,1.0),
breaks=seq(0,1,by=0.1),
labels=seq(0,1,by=0.1)) +
theme(plot.title = element_text(size=20),
axis.text=element_text(size=20)) +
labs(
#title = bquote((alpha~","~beta~","~gamma) == (.(round(alpha,2))~","~.(round(beta,2))~","~.(round(gamma,2)))),
T = "",
L = "",
R = ""
)
tmp| all_terns_equal_a[[ind]]
x_prop = starting_value
starting_value
rdist(head(x_prop, -1))
head(x_prop, -1)
burn_in <- 100
n_plot <- 100000
sample_num  <- burn_in + n_plot
tuning_sd = 1
all_sdir <- data.frame()
# Equal alphas plots
all_alphas <- matrix(NA, 2, 3)
all_alphas[1, ] <- rep(0.5, 3)
all_alphas[2, ] <- rep(1, 3)
for(a in 1:nrow(all_alphas)){
print(paste0(a))
alphas <-   all_alphas[a,]
alpha <- unique(alphas)
for(g in c(0.5, 1, 3)){
#sdir_samples <- sDir_mh(sample_num, alphas =  alphas, gamma = g, starting_value, tuning_sd)
sdir_samples <- sDir_mh_mew(sample_num, alphas =  alphas, gamma = g, starting_value, tuning_sd)
colnames(sdir_samples) <- LETTERS[1:3]
all_sdir <- sdir_samples %>% data.frame() %>%
mutate(alpha = alpha, gamma = g) %>%
#pivot_longer(cols = -c(alpha, gamma), values_to = "value", names_to = "component") %>%
rbind(all_sdir)
}
}
burn_in <- 100
n_plot <- 100000
sample_num  <- burn_in + n_plot
tuning_sd = 1
all_sdir <- data.frame()
# Equal alphas plots
all_alphas <- matrix(NA, 2, 3)
all_alphas[1, ] <- rep(0.5, 3)
all_alphas[2, ] <- rep(1, 3)
for(a in 1:nrow(all_alphas)){
print(paste0(a))
alphas <-   all_alphas[a,]
alpha <- unique(alphas)
for(g in c(0.5, 1, 3)){
#sdir_samples <- sDir_mh(sample_num, alphas =  alphas, gamma = g, starting_value, tuning_sd)
sdir_samples <- sDir_mh_new(sample_num, alphas =  alphas, gamma = g, starting_value, tuning_sd)
colnames(sdir_samples) <- LETTERS[1:3]
all_sdir <- sdir_samples %>% data.frame() %>%
mutate(alpha = alpha, gamma = g) %>%
#pivot_longer(cols = -c(alpha, gamma), values_to = "value", names_to = "component") %>%
rbind(all_sdir)
}
}
all_sdir %>%
filter(alpha == 1, gamma == 1) %>%
ggtern( aes(x = A, y = B, z = C)) +
geom_hex_tern(binwidth=0.015,  aes(fill = after_stat(density))) +
scale_fill_viridis_c() +
geom_Tisoprop(value=c(.5),colour='grey50', size = 2, linetype = "dashed") +
geom_Lisoprop(value=c(.5),colour='grey50', size = 2, linetype = "dashed") +
geom_Risoprop(value=c(.5),colour='grey50', size = 2, linetype = "dashed")
ggtern(data = all_sdir, aes(x = A, y = B, z = C)) +
geom_hex_tern(aes(fill = ..density..),binwidth=0.015,  aes(fill = after_stat(density))) +
scale_fill_viridis_c() +
geom_Tisoprop(value=c(.5),colour='grey50', size = 2, linetype = "dashed") +
geom_Lisoprop(value=c(.5),colour='grey50', size = 2, linetype = "dashed") +
geom_Risoprop(value=c(.5),colour='grey50', size = 2, linetype = "dashed") +
facet_grid(alpha~gamma) +
#facet_wrap(alpha~gamma) +
scale_T_continuous(limits=c(0.0,1.0),
breaks=seq(0,1,by=0.1),
labels=seq(0,1,by=0.1)) +
scale_L_continuous(limits=c(0.0,1.0),
breaks=seq(0,1,by=0.1),
labels=seq(0,1,by=0.1)) +
scale_R_continuous(limits=c(0.0,1.0),
breaks=seq(0,1,by=0.1),
labels=seq(0,1,by=0.1)) +
theme(plot.title = element_text(size=20),
axis.text=element_text(size=20)) +
labs(
#title = bquote((alpha~","~beta~","~gamma) == (.(round(alpha,2))~","~.(round(beta,2))~","~.(round(gamma,2)))),
T = "",
L = "",
R = ""
)
ggtern(data = all_sdir, aes(x = A, y = B, z = C)) +
geom_hex_tern(aes(fill = ..density..),binwidth=0.015,  aes(fill = after_stat(density))) +
scale_fill_viridis_c() +
geom_Tisoprop(value=c(.5),colour='grey50', size = 2, linetype = "dashed") +
geom_Lisoprop(value=c(.5),colour='grey50', size = 2, linetype = "dashed") +
geom_Risoprop(value=c(.5),colour='grey50', size = 2, linetype = "dashed") +
facet_grid(alpha~gamma) +
#facet_wrap(alpha~gamma) +
scale_T_continuous(limits=c(0.0,1.0),
breaks=seq(0,1,by=0.1),
labels=seq(0,1,by=0.1)) +
scale_L_continuous(limits=c(0.0,1.0),
breaks=seq(0,1,by=0.1),
labels=seq(0,1,by=0.1)) +
scale_R_continuous(limits=c(0.0,1.0),
breaks=seq(0,1,by=0.1),
labels=seq(0,1,by=0.1)) +
theme(plot.title = element_text(size=20),
axis.text=element_text(size=20)) +
labs(
#title = bquote((alpha~","~beta~","~gamma) == (.(round(alpha,2))~","~.(round(beta,2))~","~.(round(gamma,2)))),
T = "",
L = "",
R = ""
)
head(all_sdir)
class(all_sdir)
ggtern(data = all_sdir, aes(x = A, y = B, z = C)) +
geom_hex_tern(aes(fill = ..density..),binwidth=0.015,  aes(fill = after_stat(density))) +
scale_fill_viridis_c()
ggtern(data = all_sdir, aes(x = A, y = B, z = C))
ggtern(data = all_sdir, aes(x = A, y = B, z = C)) +
geom_hex_tern(aes(fill = ..density..), binwidth=0.015))# +
ggtern(data = all_sdir, aes(x = A, y = B, z = C)) +
geom_hex_tern(aes(fill = ..density..), binwidth=0.015)# +
ggtern(data = all_sdir, aes(x = A, y = B, z = C)) +
geom_hex_tern(aes(fill = ..density..), binwidth=0.015) +
#geom_hex_tern(aes(fill = ..density..),binwidth=0.015,  aes(fill = after_stat(density))) +
scale_fill_viridis_c() +
geom_Tisoprop(value=c(.5),colour='grey50', size = 2, linetype = "dashed") +
geom_Lisoprop(value=c(.5),colour='grey50', size = 2, linetype = "dashed") +
geom_Risoprop(value=c(.5),colour='grey50', size = 2, linetype = "dashed") +
facet_grid(alpha~gamma) +
#facet_wrap(alpha~gamma) +
scale_T_continuous(limits=c(0.0,1.0),
breaks=seq(0,1,by=0.1),
labels=seq(0,1,by=0.1)) +
scale_L_continuous(limits=c(0.0,1.0),
breaks=seq(0,1,by=0.1),
labels=seq(0,1,by=0.1)) +
scale_R_continuous(limits=c(0.0,1.0),
breaks=seq(0,1,by=0.1),
labels=seq(0,1,by=0.1)) +
theme(plot.title = element_text(size=20),
axis.text=element_text(size=20)) +
labs(
#title = bquote((alpha~","~beta~","~gamma) == (.(round(alpha,2))~","~.(round(beta,2))~","~.(round(gamma,2)))),
T = "",
L = "",
R = ""
)
M <- 3
getwd()
setwd("C:/Users/alexm/NUS Dropbox/Alexander Mozdzen/MARIA-REPULSIVEWEIGHTS/2025/sip-mix/prior_predictive")
# 2025
setwd("C:/Users/alexm/NUS Dropbox/Alexander Mozdzen/MARIA-REPULSIVEWEIGHTS/2025/sip-mix/prior_predictive")
# "Unequal" alphas plots
all_alphas <- matrix(NA, 6, 3)
all_alphas[1, ] <- c(2, 5, 2)
all_alphas[2, ] <- c(5, 2, 5)
all_alphas[3, ] <- c(5, 5, 2)
all_alphas[4, ] <- c(5, 3, 2)
# Equal alphas plots
#all_alphas <- matrix(NA, 2, 3)
all_alphas[5, ] <- rep(0.5, 3)
all_alphas[6, ] <- rep(1, 3)
for(a in 1:nrow(all_alphas)){
alphas <-   all_alphas[a,]
if(length(unique(alphas)) == 1){
all_gammas <-  c(0.5, 1, 3)
}else{
all_gammas <-  c(1)
}
for(g in all_gammas){
#gamma = 2
#filename <- paste0("tern_sdir_legend_a_", paste0(alphas, collapse = "_"),"_gamma_",g, ".png")
filename <- paste0("tern_sdir_a_", paste0(alphas, collapse = "_"),"_gamma_",g, ".png")
starting_value <- c(bayesm::rdirichlet(alpha =  alphas))
#burn-in included
burn_in <- 100
n_plot <- 100000
sample_num  <- burn_in + n_plot
tuning_sd = 1
#sdir_samples <- sDir_mh(sample_num, alphas =  alphas, gamma = g, starting_value, tuning_sd)
sdir_samples <- sDir_mh_new(sample_num, alphas =  alphas, gamma = g, starting_value, tuning_sd)
colnames(sdir_samples) <- LETTERS[1:3]
# Save plot
png( paste0(filename),
width     = 5,
height    = 5,
units     = "in",
res       = 500,
pointsize = 4)
tmp <-
ggtern(data = sdir_samples, aes(x = A, y = B, z = C)) +
geom_hex_tern(  aes(fill = after_stat(density)) ,binwidth=0.015, show.legend = FALSE) +
#geom_point(size=0.25, show.legend = FALSE) +
scale_fill_viridis_c() +
geom_Tisoprop(value=c(.5),colour='grey50', size = 1, linetype = "dashed") +
geom_Lisoprop(value=c(.5),colour='grey50', size = 1, linetype = "dashed") +
geom_Risoprop(value=c(.5),colour='grey50', size = 1, linetype = "dashed") +
scale_T_continuous(limits=c(0.0,1.0),
breaks=seq(0,1,by=0.1),
labels=seq(0,1,by=0.1)) +
scale_L_continuous(limits=c(0.0,1.0),
breaks=seq(0,1,by=0.1),
labels=seq(0,1,by=0.1)) +
scale_R_continuous(limits=c(0.0,1.0),
breaks=seq(0,1,by=0.1),
labels=seq(0,1,by=0.1)) +
labs(
#title = bquote((alpha~","~beta~","~gamma) == (.(round(alpha,2))~","~.(round(beta,2))~","~.(round(gamma,2)))),
T = "",
L = "",
R = "",
fill = ""
) +
theme(legend.position = "bottom",
legend.text=element_text(angle = 45))
#+
# theme(text=element_text(size=20), #change font size of all text
#       strip.background = element_blank(),
#       strip.text.x = element_blank(),
#       axis.text=element_text(size=15), #change font size of axis text
#       axis.title=element_text(size=15), #change font size of axis titles
#       plot.title=element_text(size=15), #change font size of plot title
#       legend.text=element_text(size=15), #change font size of legend text
#       legend.title=element_text(size=15)) #change font size of legend title
print(tmp)
dev.off()
}
# }
#for(a in 1:nrow(all_alphas)){
# Standard Dircihlet distribution:
#filename <- paste0("tern_dir_legend_a_",paste0(alphas, collapse = "_"), ".png")
filename <- paste0("tern_dir_a_",paste0(alphas, collapse = "_"), ".png")
png( paste0(filename),
width     = 5,
height    = 5,
units     = "in",
res       = 500,
pointsize = 4)
if(a == 5){
dir_samples <- brms::rdirichlet(sample_num, alpha = rep(0.65,3))
}else{
dir_samples <- brms::rdirichlet(sample_num, alpha = alphas)
}
colnames(dir_samples) <- LETTERS[1:3]
# ggtern(data = dir_samples, aes(x = A, y = B, z = C)) +
#   geom_hex_tern(binwidth=0.015, show.legend = FALSE) +
#   scale_fill_viridis_c()
if(a == 6){
color_end = 0.1
}else{
color_end = 1
}
tmp <- ggtern(data = dir_samples, aes(x = A, y = B, z = C)) +
geom_hex_tern( aes(fill = after_stat(density)), binwidth=0.015, show.legend = FALSE) +
#geom_point(size=0.25, show.legend = FALSE) +
scale_fill_viridis_c(end = color_end) +
geom_Tisoprop(value=c(.5),colour='grey50', size = 1, linetype = "dashed") +
geom_Lisoprop(value=c(.5),colour='grey50', size = 1, linetype = "dashed") +
geom_Risoprop(value=c(.5),colour='grey50', size = 1, linetype = "dashed") +
scale_T_continuous(limits=c(0.0,1.0),
breaks=seq(0,1,by=0.1),
labels=seq(0,1,by=0.1)) +
scale_L_continuous(limits=c(0.0,1.0),
breaks=seq(0,1,by=0.1),
labels=seq(0,1,by=0.1)) +
scale_R_continuous(limits=c(0.0,1.0),
breaks=seq(0,1,by=0.1),
labels=seq(0,1,by=0.1)) +
labs(
#title = bquote((alpha~","~beta~","~gamma) == (.(round(alpha,2))~","~.(round(beta,2))~","~.(round(gamma,2)))),
T = "",
L = "",
R = "",
fill = ""
)+
theme(legend.position = "bottom",
legend.text=element_text(angle = 45))
#  theme(plot.title = element_text(size=20),
#        axis.text=element_text(size=20)) +
print(tmp)
dev.off()
}
filename
getwd()
