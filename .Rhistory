if(gamma_samp == 98){
gamma_samp = 1
update_gamma = TRUE
rep_prior_shape = 3
rep_prior_rate = 2
g_to_z = FALSE
}else if(gamma_samp == 99){
gamma_samp = 1
update_gamma = TRUE
rep_prior_shape = 12
rep_prior_rate = 8
g_to_z = FALSE
}else if(gamma_samp == 100){
gamma_samp = 1
update_gamma = TRUE
rep_prior_shape = 3
rep_prior_rate = 2
g_to_z = TRUE
}else if(gamma_samp == 101){
gamma_samp = 1
update_gamma = FALSE
rep_prior_shape = 12
rep_prior_rate = 8
g_to_z = TRUE
}else{
update_gamma = FALSE
g_to_z = FALSE
}
if(zetas_samp[1] == 98){
zeta_samp = rep(1, D)
update_zetas = TRUE
rep_prior_shape = 3
rep_prior_rate = 2
}else if(zetas_samp[1] == 99){
zeta_samp = rep(1, D)
update_zetas = TRUE
rep_prior_shape = 0.1
rep_prior_rate = 1
}else{
update_zetas = FALSE
}
hyperparameters <- list(
mu_prior_mean = 0, #mean(y),
mu_prior_var_scale = 1e-05,
#mu_prior_var_scale = 1,
mu_prior_var = 100000,
mu_prop_means = if(D == 1){ mean(y)} else{colMeans(y)},
mu_prop_Sigma = if(D == 1) 1 else diag(rep(10, D)),
Sigma_prior_mat = diag(D),
Sigma_prior_df = 2,
sigma2_prior_shape = sigma2_prior_shape,
sigma2_prior_rate = sigma2_prior_rate,
alpha_prior = alpha_prior,
beta_prior = alpha_prior,
M_prior = M_prior,
p_b = 0.5,
rep_prior_shape = rep_prior_shape,
rep_prior_rate = rep_prior_rate,
g_to_z_ratio = g_to_z_ratio,
g_time_z_ratio = 10,
repulsive_locations = TRUE,
mu_independent = FALSE,
weights_prior = "selberg"
)
list2env(hyperparameters, envir = .GlobalEnv)
updates <- list(
update_allocs = TRUE, update_gamma = update_gamma, update_zetas = update_zetas,
g_to_z = g_to_z, g_time_z = FALSE,
update_var = TRUE, update_mu = TRUE, update_weight = TRUE,
update_M = TRUE, update_post_dens = TRUE
)
list2env(updates, envir = .GlobalEnv)
##############################################################################
if(update_allocs & update_M){
M_a_samp = C
M_na_samp = max(2, rpois(1, M_prior))
M_samp = M_a_samp + M_na_samp
allocs_samp = rep(c(1:M_a_samp), length.out = N)
}else if(!update_allocs){
allocs_samp = true_allocs
M_a_samp = C
M_na_samp = 0
M_samp = M_a_samp
}else if(update_allocs & !update_M){
M_a_samp = C
allocs_samp = rep(c(1:M_a_samp), length.out = N)
M_na_samp = 0
M_samp = M_a_samp
}
if(update_mu){
if(D == 1){
mus_a_samp = rnorm(M_a_samp, mu_prop_means, mu_prop_Sigma)
mus_na_samp = rnorm(M_na_samp, mu_prop_means, mu_prop_Sigma)
mus_samp <-  c(mus_a_samp, mus_na_samp)
}else{
mus_na_samp = t(rmvnorm(M_na_samp, mu_prop_means, mu_prop_Sigma))
mus_a_samp = t(rmvnorm(M_a_samp, mu_prop_means, mu_prop_Sigma))
mus_samp <- cbind(mus_a_samp, mus_na_samp)
}
}else{
mus_a_samp = true_mus
mus_na_samp = rep(0, M_na_samp)
mus_samp <- c(mus_a_samp, mus_na_samp)
}
if(update_weight){
weights_samp = c(brms::rdirichlet(1, rep(alpha_prior, M_samp)))
}else{
weights_samp = c(true_weights, rep(0, M_na_samp))
}
if(update_var){
if(D == 1){
Sigmas_a_samp = rep(1, M_a_samp)
Sigmas_na_samp = rep(1, M_na_samp)
Sigmas_samp = c(Sigmas_a_samp, Sigmas_na_samp)
}else{
Sigmas_a_samp = array(diag(D), dim = c(D, D, M_a_samp))
Sigmas_na_samp = array(diag(D), dim = c(D, D, M_na_samp))
Sigmas_samp <- array(c(Sigmas_a_samp, Sigmas_na_samp), dim = c(D, D, M_samp))
}
}else{
Sigmas_a_samp = true_sds^2
Sigmas_na_samp = numeric(0)
Sigmas_samp = Sigmas_a_samp
}
tuning_sd_mu = 1
tuning_sd_gamma = 0.1
tuning_sd_zeta = 0.1
starting_values <- list(
M_a_samp = M_a_samp,
M_na_samp = M_na_samp,
M_samp = M_samp,
allocs_samp = allocs_samp,
mus_a_samp = mus_a_samp,
mus_na_samp = mus_na_samp,
mus_samp = mus_samp,
Sigmas_a_samp = Sigmas_a_samp,
Sigmas_na_samp = Sigmas_na_samp,
weights_samp = weights_samp,
gamma_samp = gamma_samp,
zetas_samp = zetas_samp,
tuning_sd_mu = tuning_sd_mu,
tuning_sd_gamma = tuning_sd_gamma,
tuning_sd_zeta = tuning_sd_zeta
)
true_weights <- c(0.2, 0.2, 0.2, 0.3, 0.1)
set.seed(1)
startt <- Sys.time()
results <- rep_mix_main(y, updates = updates, hyperparameters , starting_values = starting_values,
n_save = n_save, n_burn = n_burn, n_thin = n_thin, true_weights)
endt <-  Sys.time() - startt
endt
source("~/sip-mix/simstudy/simstudy_random_prior.R", echo=TRUE)
# entropy <- function(cluster_matrix) {
#   apply(cluster_matrix, 1, function(clusters) {
#     sizes <- table(clusters)
#     p <- sizes / sum(sizes)
#     -sum(p * log(p), na.rm = TRUE)
#   })
# }
#
#
#setwd("~/paper/fullrep/M_random")
dataset <- "simdata_1"
y <- readRDS(paste0("simstudy_prior/datasets/",dataset,".rds"))
repulsive_grid <- readRDS(paste0("simstudy_prior/grid/repulsive_grid.rds"))
all_alphas <- c(1)
# All relevant parameters:
all_gammas <- c(0, 0.25,  1, 98, 100)
all_zetas <- c(0.001, 0.1,  1,  3, 5, 98, 99)
repulsive_grid <- expand.grid(all_alphas, all_gammas, all_zetas)
colnames(repulsive_grid) <- c("alpha", "gamma", "zeta")
from_to <- apply(y, 2, range)
y_line1 <- seq(from_to[1,1], from_to[2,1], length.out = 2e1)
y_line2 <- seq(from_to[1,2], from_to[2,2], length.out = 2e1)
y_grid <- as.matrix(expand.grid(y_line1, y_line2))
#################################################################################
# For convenience
#################################################################################
dir.create(paste0("simstudy_prior/results/",dataset,"/plots/"), showWarnings = FALSE, recursive = TRUE)
#library(label.switching)
library(mcclust.ext)
library(ggalt)
all_mus.w <- data.frame()
all_weights.w <- data.frame()
all_sigmas.w <- data.frame()
all_M_a.w <- data.frame()
all_post_dens.w <- data.frame()
all_psms <- list()
binder.ggs <- list()
vi.ggs <- list()
all_ws.l_list <- list()
run = 1
print(run)
filename <- paste0( paste0(colnames(repulsive_grid[run,]), "_"), paste0(repulsive_grid[run,]), collapse = "_" )
# w3.w <- matrix(NA, n_save, 3)
# for(i in 1:n_save){
#   w3.w[i,] <- readRDS(paste0("simstudy_prior/results/",dataset,"/weights/","weights_",filename,".rds"))[[i]][1:3]
# }
#
#
#
# # weights:
# all_ws.l_list[[run]] <-
#   cbind(repulsive_grid[run,], w3.w) %>% mutate(iter = 1:n_save) %>%
#   pivot_longer(cols = -c(colnames(repulsive_grid),"iter"), names_to = "component", values_to = "value")
#
# M_a
M_a.w <- cbind(repulsive_grid[run,],
M_a = readRDS(paste0("simstudy_prior/results/",dataset,"/M_a/","M_a_",filename,".rds")))%>%
mutate(iter = 1:n_save)
library(dplyr)
print(run)
filename <- paste0( paste0(colnames(repulsive_grid[run,]), "_"), paste0(repulsive_grid[run,]), collapse = "_" )
# w3.w <- matrix(NA, n_save, 3)
# for(i in 1:n_save){
#   w3.w[i,] <- readRDS(paste0("simstudy_prior/results/",dataset,"/weights/","weights_",filename,".rds"))[[i]][1:3]
# }
#
#
#
# # weights:
# all_ws.l_list[[run]] <-
#   cbind(repulsive_grid[run,], w3.w) %>% mutate(iter = 1:n_save) %>%
#   pivot_longer(cols = -c(colnames(repulsive_grid),"iter"), names_to = "component", values_to = "value")
#
# M_a
M_a.w <- cbind(repulsive_grid[run,],
M_a = readRDS(paste0("simstudy_prior/results/",dataset,"/M_a/","M_a_",filename,".rds")))%>%
mutate(iter = 1:n_save)
M_a.w <- cbind(repulsive_grid[run,],
M_a = readRDS(paste0("simstudy_prior/results/",dataset,"/M_a/","M_a_",filename,".rds")))%>%
mutate(iter = 1:n_save)
#rm(list = ls())
#Create grid:
#all_alphas <- c(0.05, 0.1, 1, 10)
#all_alphas <- c(0.1, 1)
all_alphas <- c( 1)
#all_gammas <- c(0, 0.25, 0.5,  1, 98, 100, 101)
#all_zetas <- c(0.001,  1,  3, 5, 98)
# pre-2025:
all_gammas <- c(100)
all_zetas <- c(0.001,  1, 5, 100)
# 2025:
all_gammas <- c(0, 0.25, 1, 98, 100)
all_zetas <- c(0.1, 99)
repulsive_grid <- expand.grid(all_alphas, all_gammas, all_zetas)
colnames(repulsive_grid) <- c("alpha", "gamma", "zeta")
repulsive_grid
source("~/sip-mix/simstudy/simstudy_random_prior.R", echo=TRUE)
source("~/sip-mix/simstudy/simstudy_random_prior.R", echo=TRUE)
dataset <- "simdata_1"
y <- readRDS(paste0("simstudy/datasets/",dataset,".rds"))
repulsive_grid <- readRDS(paste0("simstudy/grid/repulsive_grid.rds"))
###############################################################################
# Plots
###############################################################################
# Repulsive grid including all constellations:
# redo plots for all relevant constellations, therefore create large repulsive grid:
all_alphas <- c(1)
# All relevant parameters:
all_gammas <- c(0, 0.25,  1, 98, 100)
all_zetas <- c(0.001, 0.1,  1,  3, 5, 98, 99)
repulsive_grid <- expand.grid(all_alphas, all_gammas, all_zetas)
colnames(repulsive_grid) <- c("alpha", "gamma", "zeta")
from_to <- apply(y, 2, range)
y_line1 <- seq(from_to[1,1], from_to[2,1], length.out = 2e1)
y_line2 <- seq(from_to[1,2], from_to[2,2], length.out = 2e1)
y_grid <- as.matrix(expand.grid(y_line1, y_line2))
#################################################################################
# For convenience
#################################################################################
dir.create(paste0("simstudy/results/",dataset,"/plots/"), showWarnings = FALSE, recursive = TRUE)
#library(label.switching)
library(mcclust.ext)
library(ggalt)
all_mus.w <- data.frame()
all_weights.w <- data.frame()
all_sigmas.w <- data.frame()
all_M_a.w <- data.frame()
all_post_dens.w <- data.frame()
all_psms <- list()
binder.ggs <- list()
vi.ggs <- list()
all_ws.l_list <- list()
run
#for(run in which(repulsive_grid$gamma == 101)){
print(run)
filename <- paste0( paste0(colnames(repulsive_grid[run,]), "_"), paste0(repulsive_grid[run,]), collapse = "_" )
M_a.w <- cbind(repulsive_grid[run,],
M_a = readRDS(paste0("simstudy/results/",dataset,"/M_a/","M_a_",filename,".rds")))%>%
mutate(iter = 1:n_save)
# entropy <- function(cluster_matrix) {
#   apply(cluster_matrix, 1, function(clusters) {
#     sizes <- table(clusters)
#     p <- sizes / sum(sizes)
#     -sum(p * log(p), na.rm = TRUE)
#   })
# }
#
#
#setwd("~/paper/fullrep/M_random")
dataset <- "simdata_1"
y <- readRDS(paste0("simstudy/datasets/",dataset,".rds"))
repulsive_grid <- readRDS(paste0("simstudy/grid/repulsive_grid.rds"))
from_to <- apply(y, 2, range)
y_line1 <- seq(from_to[1,1], from_to[2,1], length.out = 2e1)
y_line2 <- seq(from_to[1,2], from_to[2,2], length.out = 2e1)
y_grid <- as.matrix(expand.grid(y_line1, y_line2))
filename <- paste0( paste0(colnames(repulsive_grid[run,]), "_"), paste0(repulsive_grid[run,]), collapse = "_" )
M_a.w <- cbind(repulsive_grid[run,],
M_a = readRDS(paste0("simstudy/results/",dataset,"/M_a/","M_a_",filename,".rds")))%>%
mutate(iter = 1:n_save)
all_M_a.w <- rbind(all_M_a.w, M_a.w)
zetas_samp <- rep(repulsive_grid$zeta[run], 2)
gamma_samp <- repulsive_grid$gamma[run]
alpha_prior <- repulsive_grid$alpha[run]
filename <- paste0( paste0(colnames(repulsive_grid[run,]), "_"), paste0(repulsive_grid[run,]), collapse = "_" )
zetas_samp <- rep(repulsive_grid$zeta[run], 2)
gamma_samp <- repulsive_grid$gamma[run]
alpha_prior <- repulsive_grid$alpha[run]
allocs <- readRDS(paste0("simstudy/results/",dataset,"/allocs/","allocs_",filename,".rds"))
s_binder <- c(salso(allocs, loss=salso::binder(a = 1)))
df <- data.frame(x = y[,1], y = y[,2], Cluster = factor(s_binder))
binder.ggs[[run]] <-
ggplot() +
geom_point(data = df, aes(x = x, y = y, color = Cluster),  size = 2) +
geom_encircle(data = df, aes(x = x, y = y, group = Cluster, fill = Cluster),
size = 0.5, expand = 0, alpha = 0.15, s_shape = 0.5,  spread=0.025) +
labs(title = paste0("Binder \n zeta = ", zetas_samp[1], " and gamma = ", gamma_samp), x = "BMI", y = "CEBQ Person Parameter", legend = "test") +
theme_minimal()
s_vi <- c(salso(allocs, loss=salso::VI(a = 1)))
df <- data.frame(x = y[,1], y = y[,2], Cluster = factor(s_vi))
vi.ggs[[run]] <-
ggplot() +
geom_point(data = df, aes(x = x, y = y, color = Cluster),  size = 2) +
geom_encircle(data = df, aes(x = x, y = y, group = Cluster, fill = Cluster),
size = 0.5, expand = 0, alpha = 0.15, s_shape=0.5,  spread=0.025) +
labs(title = paste0("vi \n zeta = ", zetas_samp[1], " and gamma = ", gamma_samp), x = "BMI", y = "CEBQ Person Parameter", legend = "test") +
theme_minimal()
for(run in 1:nrow(repulsive_grid)){
#for(run in which(repulsive_grid$gamma == 101)){
print(run)
filename <- paste0( paste0(colnames(repulsive_grid[run,]), "_"), paste0(repulsive_grid[run,]), collapse = "_" )
# M_a
M_a.w <- cbind(repulsive_grid[run,],
M_a = readRDS(paste0("simstudy/results/",dataset,"/M_a/","M_a_",filename,".rds")))%>%
mutate(iter = 1:n_save)
all_M_a.w <- rbind(all_M_a.w, M_a.w)
zetas_samp <- rep(repulsive_grid$zeta[run], 2)
gamma_samp <- repulsive_grid$gamma[run]
alpha_prior <- repulsive_grid$alpha[run]
allocs <- readRDS(paste0("simstudy/results/",dataset,"/allocs/","allocs_",filename,".rds"))
s_binder <- c(salso(allocs, loss=salso::binder(a = 1)))
df <- data.frame(x = y[,1], y = y[,2], Cluster = factor(s_binder))
binder.ggs[[run]] <-
ggplot() +
geom_point(data = df, aes(x = x, y = y, color = Cluster),  size = 2) +
geom_encircle(data = df, aes(x = x, y = y, group = Cluster, fill = Cluster),
size = 0.5, expand = 0, alpha = 0.15, s_shape = 0.5,  spread=0.025) +
labs(title = paste0("Binder \n zeta = ", zetas_samp[1], " and gamma = ", gamma_samp), x = "BMI", y = "CEBQ Person Parameter", legend = "test") +
theme_minimal()
s_vi <- c(salso(allocs, loss=salso::VI(a = 1)))
df <- data.frame(x = y[,1], y = y[,2], Cluster = factor(s_vi))
vi.ggs[[run]] <-
ggplot() +
geom_point(data = df, aes(x = x, y = y, color = Cluster),  size = 2) +
geom_encircle(data = df, aes(x = x, y = y, group = Cluster, fill = Cluster),
size = 0.5, expand = 0, alpha = 0.15, s_shape=0.5,  spread=0.025) +
labs(title = paste0("vi \n zeta = ", zetas_samp[1], " and gamma = ", gamma_samp), x = "BMI", y = "CEBQ Person Parameter", legend = "test") +
theme_minimal()
}
for(run in 1:nrow(repulsive_grid)){
#for(run in which(repulsive_grid$gamma == 101)){
print(run)
filename <- paste0( paste0(colnames(repulsive_grid[run,]), "_"), paste0(repulsive_grid[run,]), collapse = "_" )
w3.w <- matrix(NA, n_save, 3)
for(i in 1:n_save){
w3.w[i,] <- readRDS(paste0("simstudy/results/",dataset,"/weights/","weights_",filename,".rds"))[[i]][1:3]
}
# weights:
all_ws.l_list[[run]] <-
cbind(repulsive_grid[run,], w3.w) %>% mutate(iter = 1:n_save) %>%
pivot_longer(cols = -c(colnames(repulsive_grid),"iter"), names_to = "component", values_to = "value")
# M_a
M_a.w <- cbind(repulsive_grid[run,],
M_a = readRDS(paste0("simstudy/results/",dataset,"/M_a/","M_a_",filename,".rds")))%>%
mutate(iter = 1:n_save)
all_M_a.w <- rbind(all_M_a.w, M_a.w)
zetas_samp <- rep(repulsive_grid$zeta[run], 2)
gamma_samp <- repulsive_grid$gamma[run]
alpha_prior <- repulsive_grid$alpha[run]
allocs <- readRDS(paste0("simstudy/results/",dataset,"/allocs/","allocs_",filename,".rds"))
s_binder <- c(salso(allocs, loss=salso::binder(a = 1)))
df <- data.frame(x = y[,1], y = y[,2], Cluster = factor(s_binder))
binder.ggs[[run]] <-
ggplot() +
geom_point(data = df, aes(x = x, y = y, color = Cluster),  size = 2) +
geom_encircle(data = df, aes(x = x, y = y, group = Cluster, fill = Cluster),
size = 0.5, expand = 0, alpha = 0.15, s_shape = 0.5,  spread=0.025) +
labs(title = paste0("Binder \n zeta = ", zetas_samp[1], " and gamma = ", gamma_samp), x = "BMI", y = "CEBQ Person Parameter", legend = "test") +
theme_minimal()
s_vi <- c(salso(allocs, loss=salso::VI(a = 1)))
df <- data.frame(x = y[,1], y = y[,2], Cluster = factor(s_vi))
vi.ggs[[run]] <-
ggplot() +
geom_point(data = df, aes(x = x, y = y, color = Cluster),  size = 2) +
geom_encircle(data = df, aes(x = x, y = y, group = Cluster, fill = Cluster),
size = 0.5, expand = 0, alpha = 0.15, s_shape=0.5,  spread=0.025) +
labs(title = paste0("vi \n zeta = ", zetas_samp[1], " and gamma = ", gamma_samp), x = "BMI", y = "CEBQ Person Parameter", legend = "test") +
theme_minimal()
}
# Double checking which runs had good mixing:
ess_threshold <- 50
#
all_ws_filtered <- all_ws.l %>%
na.omit() %>%
group_by(alpha, gamma, zeta, component) %>%
summarise(ess = effectiveSize(value), .groups = 'drop')
all_ws.l <- do.call(rbind, all_ws.l_list)
all_ws.l %>%
na.omit() %>%
group_by(alpha, gamma, zeta, component) %>%
summarise(ess = effectiveSize(value), .groups = 'drop')
all_ws.l %>%
na.omit() %>%
group_by(alpha, gamma, zeta, component)
?group_by
head(all_ws.l)
head(all_ws.l_list)
cbind(repulsive_grid[run,], w3.w) %>% mutate(iter = 1:n_save) %>%
pivot_longer(cols = -c(colnames(repulsive_grid),"iter"), names_to = "component", values_to = "value")
library(tidyverse)
for(run in 1:nrow(repulsive_grid)){
#for(run in which(repulsive_grid$gamma == 101)){
print(run)
filename <- paste0( paste0(colnames(repulsive_grid[run,]), "_"), paste0(repulsive_grid[run,]), collapse = "_" )
w3.w <- matrix(NA, n_save, 3)
for(i in 1:n_save){
w3.w[i,] <- readRDS(paste0("simstudy/results/",dataset,"/weights/","weights_",filename,".rds"))[[i]][1:3]
}
# weights:
all_ws.l_list[[run]] <-
cbind(repulsive_grid[run,], w3.w) %>% mutate(iter = 1:n_save) %>%
pivot_longer(cols = -c(colnames(repulsive_grid),"iter"), names_to = "component", values_to = "value")
# M_a
M_a.w <- cbind(repulsive_grid[run,],
M_a = readRDS(paste0("simstudy/results/",dataset,"/M_a/","M_a_",filename,".rds")))%>%
mutate(iter = 1:n_save)
all_M_a.w <- rbind(all_M_a.w, M_a.w)
zetas_samp <- rep(repulsive_grid$zeta[run], 2)
gamma_samp <- repulsive_grid$gamma[run]
alpha_prior <- repulsive_grid$alpha[run]
allocs <- readRDS(paste0("simstudy/results/",dataset,"/allocs/","allocs_",filename,".rds"))
s_binder <- c(salso(allocs, loss=salso::binder(a = 1)))
df <- data.frame(x = y[,1], y = y[,2], Cluster = factor(s_binder))
binder.ggs[[run]] <-
ggplot() +
geom_point(data = df, aes(x = x, y = y, color = Cluster),  size = 2) +
geom_encircle(data = df, aes(x = x, y = y, group = Cluster, fill = Cluster),
size = 0.5, expand = 0, alpha = 0.15, s_shape = 0.5,  spread=0.025) +
labs(title = paste0("Binder \n zeta = ", zetas_samp[1], " and gamma = ", gamma_samp), x = "BMI", y = "CEBQ Person Parameter", legend = "test") +
theme_minimal()
s_vi <- c(salso(allocs, loss=salso::VI(a = 1)))
df <- data.frame(x = y[,1], y = y[,2], Cluster = factor(s_vi))
vi.ggs[[run]] <-
ggplot() +
geom_point(data = df, aes(x = x, y = y, color = Cluster),  size = 2) +
geom_encircle(data = df, aes(x = x, y = y, group = Cluster, fill = Cluster),
size = 0.5, expand = 0, alpha = 0.15, s_shape=0.5,  spread=0.025) +
labs(title = paste0("vi \n zeta = ", zetas_samp[1], " and gamma = ", gamma_samp), x = "BMI", y = "CEBQ Person Parameter", legend = "test") +
theme_minimal()
}
all_ws.l <- do.call(rbind, all_ws.l_list)
# Double checking which runs had good mixing:
ess_threshold <- 50
#
all_ws_filtered <- all_ws.l %>%
na.omit() %>%
group_by(alpha, gamma, zeta, component) %>%
summarise(ess = effectiveSize(value), .groups = 'drop')
all_ws_filtered
setwd("~/sip-mix")
usethis::create_from_github(
"https://github.com/alex-zdz/sip-mix.git",
destdir = "~/sip-mix"
)
usethis::create_from_github(
"https://github.com/alex-zdz/sip-mix.git",
destdir = "~/sip-mix", fork = FALSE
)
usethis::create_from_github(
https://github.com/alex-zdz/sip-mix.git,
usethis::create_from_github(
"https://github.com/alex-zdz/sip-mix.git",
destdir = "~/sip-mix", fork = FALSE
)
usethis::create_from_github(
"https://github.com/alex-zdz/sip-mix.git",
destdir = "~/sip-mix", fork = FALSE
)
usethis::create_from_github(
"https://github.com/alex-zdz/sip-mix.git",
destdir = "~/sip-mix"
)
usethis::create_from_github(
"https://github.com/alex-zdz/sip-mix.git",
destdir = "~/sip-mix", fork = FALSE
)
usethis::create_from_github(
"https://github.com/alex-zdz/sip-mix.git",
destdir = "~/", fork = FALSE
)
